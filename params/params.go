package params

import (
	"github.com/LoCCS/bliss/huffman"
)

const (
	BLISS_B_0 = iota
	BLISS_B_1
	BLISS_B_2
	BLISS_B_3
	BLISS_B_4
)

type BlissBParam struct {
	Version int     /* the version of bliss-b */
	Q       uint32  /* field modulus  */
	N       uint32  /* ring size (x^n+1)  */
	D       uint32  /* bit drop shift  */
	Modp    uint32  /* magic modulus  (derived from d) */
	Q2      uint32  /* 2 * field modulus  */
	Qinv    uint32  /* floor(2^32/q)      */
	Q2inv   uint32  /* floor(2^32/q2)     */
	OneQ2   uint32  /* 1/(q+2) mod 2q     */
	Kappa   uint32  /* index vector size  */
	Binf    uint32  /* infinite norm  */
	Bl2     uint32  /* L2 norm  */
	Nz1     uint32  /* nonzero +-1  aka delta_1*n in L Ducas' Bliss-B paper */
	Nz2     uint32  /* nonzero +-2  aka delta_2*n  in L Ducas' Bliss-B paper */
	Sigma   uint32  /* standard deviation  */
	M       uint32  /*  We use P_{max} given on page 7 of L Ducas' Bliss-B paper */
	RR      float64 /* repetition rate  */
	Psi     []int32 /* n roots of unity (mod q)  */
	RPsi    []int32 /* w[i]/n (mod q)  */
	Ell     uint32  /* number of rows in table for Gaussian sampling */
	Prec    uint32  /* 8 * number of columns in the table */
	Qbits   uint32  /* bits to store an unsigned integer within [0,q) */
	Pbits   uint32  /* bits to store an unsigned integer within [0,p) */
	Nbits   uint32  /* bits to store an unsigned integer within [0,n) */
	MaxSig  uint32  /* upper bound on the size of encoded signature */
	MinSig  uint32  /* lower bound on the size of encoded signature */
	Code    *huffman.HuffmanCode
	Nbz1    uint8
	Nbz2    uint8
}

func GetParam(version int) *BlissBParam {
	/*
	 * Roots of unity. q = 7681  n = 256
	 * w is a primitive root of unity (i.e. w^n mod q = 1)
	 * psi is the square root of w  (i.e. a 2n primitive root
	 * of unity (i.i.e  psi^2n mod q = 1))
	 * in this table w = 2028 and psi = 7146
	 * and this table is [psi^0, psi^1, psi^2, ...  psi^(n - 1)]
	 *
	 */
	PsiQ7681N256 := []int32{
		1, 7146, 2028, 5722, 3449, 5906, 4862, 2689,
		5413, 7463, 1415, 3394, 4607, 856, 2900, 62,
		5235, 2840, 1438, 6451, 5165, 1885, 5417, 5323,
		1846, 3239, 3041, 1437, 6986, 3137, 3844, 1968,
		7098, 4665, 550, 5309, 1655, 5571, 7424, 6918,
		1112, 4198, 4603, 2996, 2469, 217, 6801, 2259,
		5033, 3376, 6556, 2757, 7438, 7109, 6461, 7496,
		6803, 1189, 1408, 7139, 5773, 6888, 1800, 4806,
		1925, 7060, 1952, 296, 2941, 1170, 3892, 7012,
		4589, 2805, 4801, 4600, 4601, 4066, 6094, 4135,
		7584, 5809, 2990, 5679, 3411, 3193, 4608, 321,
		4928, 5784, 1003, 1065, 6300, 1459, 2897, 1667,
		6832, 1036, 6453, 4095, 5941, 1499, 4540, 5977,
		5282, 738, 4582, 6550, 5967, 2951, 3501, 1129,
		2784, 674, 417, 7335, 766, 4964, 1886, 4882,
		7351, 7568, 6688, 1266, 6299, 1994, 869, 3626,
		3383, 2811, 1591, 1406, 528, 1717, 3125, 2583,
		675, 7563, 1682, 6488, 732, 111, 2063, 2359,
		5300, 6470, 2681, 2012, 6601, 1725, 6526, 3445,
		365, 4431, 2844, 6979, 6882, 5010, 319, 5998,
		1728, 4921, 1848, 2169, 7097, 5200, 6203, 7268,
		5887, 7346, 2562, 4229, 3380, 4416, 3188, 7283,
		5543, 7042, 3901, 2197, 7479, 536, 5118, 3987,
		2273, 5224, 1044, 2173, 4957, 5631, 6048, 5702,
		6468, 3751, 5637, 2838, 2508, 2395, 1402, 2668,
		1286, 3280, 4149, 94, 3477, 6288, 198, 1604,
		2132, 3849, 6974, 1876, 2551, 2433, 4115, 2922,
		3654, 3765, 5828, 506, 5806, 4595, 7276, 1607,
		527, 2252, 1097, 4542, 4907, 1657, 4501, 3799,
		3000, 329, 648, 6646, 693, 5614, 7462, 1950,
		1366, 6566, 5088, 4675, 2881, 2546, 5108, 1656,
		5036, 1771, 4959, 4561, 2423, 1784, 5685, 201,
	}

	/*
	 * iam: this table is [- (psi^0)/n, - (psi^1)/n, - (psi^2)/n, ...  - (psi^(n - 1))/n]
	 * but we are not sure why there is a minus here.
	 *
	 * BD: got it. That's because the code does not use an inverse nnt,
	 * but applies the same ntt twice. The multiplication starts with
	 *
	 *     c = ntt(ntt(a * w) * ntt(b * w))
	 *
	 * instead of this
	 *
	 *     d = inv_ntt(ntt(a * w) * ntt(b * w)),
	 *
	 * where '*' means elementwise multiplication. The coefficients of c are
	 * the same as in d but in a different order:
	 *
	 *  c[0] = d[0]
	 *  c[i] = d[n - i]  for i=1 to n-1
	 *
	 * To get the final result, we must multiply d[i] by 1/n * 1/psi^i.
	 * To get the same thing in c, we multiply c[i] by 1/n * 1/psi^(n - i).
	 * That's what the table r is about:
	 *
	 *   r[i] = 1/n * 1/psi^(n - i)
	 *        = 1/n * psi^i * 1/psi^n
	 *        = - (psi^i)/n            because psi^n = -1.
	 *
	 * Then the code applies a permutation to c to put the coefficients in
	 * the right order. There's a slight inefficiency since multiplying c[0]
	 * by r[0] gives the opposite of what we want (wrong sign). This gets
	 * adjusted too in the permutation code.
	 *
	 */
	RPsiQ7681N256 := []int32{
		30, 6993, 7073, 2678, 3617, 517, 7602, 3860,
		1089, 1141, 4045, 1967, 7633, 2637, 2509, 1860,
		3430, 709, 4735, 1505, 1330, 2783, 1209, 6070,
		1613, 4998, 6739, 4705, 2193, 1938, 105, 5273,
		5553, 1692, 1138, 5650, 3564, 5829, 7652, 153,
		2636, 3044, 7513, 5389, 4941, 6510, 4324, 6322,
		5051, 1427, 4655, 5900, 391, 5883, 1805, 2131,
		4384, 4946, 3835, 6783, 4208, 6934, 233, 5922,
		3983, 4413, 4793, 1199, 3739, 4376, 1545, 2973,
		7093, 7340, 5772, 7423, 7453, 6765, 6157, 1154,
		4771, 5288, 5209, 1388, 2477, 3618, 7663, 1949,
		1901, 4538, 7047, 1226, 4656, 5365, 2419, 3924,
		5254, 356, 1565, 7635, 1567, 6565, 5623, 2647,
		4840, 6778, 6883, 4475, 2347, 4039, 5177, 3146,
		6710, 4858, 4829, 4982, 7618, 2981, 2813, 521,
		5462, 4291, 934, 7256, 4626, 6053, 3027, 1246,
		1637, 7520, 1644, 3775, 478, 5424, 1578, 680,
		4888, 4141, 4374, 2615, 6598, 3330, 442, 1641,
		5380, 2075, 3620, 6593, 6005, 5664, 3755, 3497,
		3269, 2353, 829, 1983, 6754, 4361, 1889, 3277,
		5754, 1691, 1673, 3622, 5523, 2380, 1746, 2972,
		7628, 5312, 50, 3974, 1547, 1903, 3468, 3422,
		4989, 3873, 1815, 4462, 1621, 718, 7601, 4395,
		6742, 3100, 596, 3742, 2771, 7629, 4777, 2078,
		2015, 4996, 128, 649, 6111, 2721, 3655, 3230,
		175, 6228, 1574, 2820, 4457, 4296, 5940, 2034,
		2512, 255, 1833, 2513, 7401, 3861, 554, 3169,
		2086, 5416, 5858, 7499, 5198, 7273, 3212, 2124,
		448, 6112, 2186, 5683, 1271, 3624, 4453, 6436,
		5509, 2189, 4078, 7355, 5428, 7119, 1111, 4733,
		2575, 4955, 6701, 1992, 1939, 7251, 7301, 3594,
		5141, 7044, 2831, 6253, 3561, 7434, 1568, 6030,
	}

	PsiQ12289N512 := []int32{
		1, 10302, 3400, 3150, 8340, 6281, 5277, 9407,
		12149, 7822, 3271, 1404, 12144, 5468, 10849, 10232,
		7311, 10930, 9042, 64, 8011, 8687, 4976, 5333,
		8736, 5925, 12176, 3329, 9048, 431, 3833, 3009,
		5860, 6152, 3531, 922, 11336, 1105, 4096, 8855,
		2963, 11239, 9509, 6099, 10530, 5057, 4143, 1489,
		3006, 11821, 8241, 6370, 480, 4782, 9852, 453,
		9275, 4075, 1426, 5297, 6534, 6415, 9377, 10314,
		4134, 7083, 9273, 8049, 6915, 11286, 2143, 6142,
		11112, 3789, 4414, 3728, 2731, 5241, 7205, 350,
		5023, 10256, 8779, 6507, 10908, 3600, 11287, 156,
		9542, 1973, 12129, 10695, 9005, 12138, 5101, 2738,
		3621, 6427, 10111, 1958, 5067, 8851, 10911, 9928,
		9198, 9606, 9984, 8527, 3382, 2049, 8585, 11026,
		2625, 6950, 3186, 10542, 5791, 8076, 2422, 4774,
		1170, 10120, 8653, 11089, 334, 12237, 5012, 7535,
		8246, 8724, 5191, 8243, 2396, 7280, 11082, 1954,
		726, 7540, 10600, 1146, 8652, 787, 9223, 9087,
		8961, 1254, 2969, 11606, 5331, 421, 11414, 5876,
		11227, 8775, 2166, 9597, 3289, 2505, 11899, 723,
		1212, 400, 3985, 8210, 6522, 5681, 5444, 9381,
		2366, 5445, 7394, 5766, 8595, 3445, 12047, 1583,
		563, 11907, 9405, 3834, 1022, 9260, 9302, 11871,
		7203, 4324, 10512, 3956, 4388, 6234, 354, 9364,
		11567, 9090, 3000, 11454, 130, 12048, 11885, 3963,
		2768, 5456, 10115, 6299, 6378, 9162, 7404, 10474,
		5728, 10367, 9424, 2948, 4177, 7665, 8005, 8320,
		9154, 11011, 7852, 5106, 5092, 8332, 9888, 2655,
		8785, 6874, 6730, 10211, 12171, 975, 4337, 9259,
		11289, 8471, 4053, 8273, 4231, 10968, 7270, 6374,
		4821, 6093, 10163, 9235, 9821, 605, 2187, 4737,
		955, 7210, 2704, 9734, 1428, 1323, 1045, 426,
		1479, 10587, 2399, 1319, 8993, 11404, 1168, 1805,
		1853, 4789, 8232, 11964, 6747, 1010, 8526, 5369,
		10938, 5435, 2686, 8633, 1673, 6068, 10682, 10258,
		4805, 1018, 4919, 7991, 11560, 10710, 3778, 1693,
		3195, 4948, 11813, 11848, 3748, 12147, 11796, 8760,
		7393, 7753, 5195, 295, 3707, 7591, 7575, 2500,
		9545, 8301, 10040, 7856, 9447, 6403, 8643, 6381,
		3201, 5315, 7635, 6170, 4632, 677, 6591, 3757,
		6553, 5529, 243, 8719, 2837, 3532, 11224, 2447,
		4255, 147, 2847, 8240, 8357, 9369, 1632, 1512,
		6461, 3998, 6957, 1566, 9764, 3263, 5011, 9522,
		4846, 5574, 9140, 1962, 9408, 10162, 11222, 6421,
		9744, 6136, 10745, 7967, 10092, 2844, 1912, 10446,
		12208, 1190, 7247, 2919, 355, 7377, 2678, 12240,
		11340, 5446, 5407, 9166, 11745, 11785, 6039, 6860,
		9970, 11767, 4938, 7105, 2426, 9115, 2481, 10431,
		5146, 11635, 9153, 709, 4452, 1956, 9041, 2051,
		4611, 5537, 8925, 11341, 3459, 8807, 27, 7796,
		5777, 11316, 3978, 9830, 7300, 8209, 8509, 2281,
		2294, 1041, 8374, 168, 10276, 5906, 773, 174,
		10643, 1728, 7384, 1058, 11462, 8812, 2381, 218,
		9238, 3860, 10805, 11637, 5179, 7509, 10752, 6347,
		9314, 316, 11136, 5257, 12280, 5594, 6267, 8517,
		10963, 4916, 1663, 1360, 1260, 3336, 7428, 11942,
		1305, 12233, 671, 6224, 7935, 12231, 4645, 11713,
		1635, 7840, 4372, 1159, 7399, 8120, 1017, 6906,
		4591, 8410, 2370, 9786, 8705, 6077, 5088, 3991,
		8577, 2344, 3, 6328, 10200, 9450, 442, 6554,
		3542, 3643, 11869, 11177, 9813, 4212, 11854, 4115,
		7969, 6118, 9644, 8212, 2548, 192, 11744, 1483,
		2639, 3710, 1630, 5486, 11950, 9987, 2566, 1293,
		11499, 9027, 5291, 6167, 10593, 2766, 9430, 3315,
	}

	RPsiQ12289N512 := []int32{
		24, 1468, 7866, 1866, 3536, 3276, 3758, 4566,
		8929, 3393, 4770, 9118, 8809, 8342, 2307, 12077,
		3418, 4251, 8095, 1536, 7929, 11864, 8823, 5102,
		751, 7021, 9577, 6162, 8239, 10344, 5969, 10771,
		5461, 180, 11010, 9839, 1706, 1942, 12281, 3607,
		9667, 11667, 7014, 11197, 6940, 10767, 1120, 11158,
		10699, 1057, 1160, 5412, 11520, 4167, 2957, 10872,
		1398, 11777, 9646, 4238, 9348, 6492, 3846, 1756,
		904, 10235, 1350, 8841, 6203, 506, 2276, 12229,
		8619, 4913, 7624, 3449, 4099, 2894, 874, 8400,
		9951, 364, 1783, 8700, 3723, 377, 530, 3744,
		7806, 10485, 8449, 10900, 7207, 8665, 11823, 4267,
		881, 6780, 9173, 10125, 11007, 3511, 3795, 4781,
		11839, 9342, 6125, 8024, 7434, 20, 9416, 6555,
		1555, 7043, 2730, 7228, 3805, 9489, 8972, 3975,
		3502, 9389, 11048, 8067, 8016, 11041, 9687, 8794,
		1280, 463, 1694, 1208, 8348, 2674, 7899, 10029,
		5135, 8914, 8620, 2926, 11024, 6599, 150, 9175,
		6151, 5518, 9811, 8186, 5054, 10104, 3578, 5845,
		11379, 1687, 2828, 9126, 5202, 10964, 2929, 5063,
		4510, 9600, 9617, 416, 9060, 1165, 7766, 3942,
		7628, 7790, 5410, 3205, 9656, 8946, 6481, 1125,
		1223, 3121, 4518, 5993, 12239, 1038, 2046, 2257,
		826, 5464, 6508, 8921, 7000, 2148, 8496, 3534,
		7250, 9247, 10555, 4538, 3120, 6505, 2593, 9089,
		4987, 8054, 9269, 3708, 5604, 10975, 5650, 5596,
		2293, 3028, 4974, 9307, 1936, 11914, 7785, 3056,
		10783, 6195, 4113, 11943, 11607, 3344, 3821, 2275,
		1927, 5219, 1763, 11573, 9457, 11111, 5776, 1014,
		578, 6680, 11249, 1928, 3232, 5163, 2434, 5508,
		5103, 11053, 10421, 438, 2213, 2231, 3332, 3087,
		10631, 994, 3451, 125, 9694, 7174, 502, 10224,
		10918, 8308, 8420, 7078, 6919, 3338, 3454, 6453,
		7605, 4335, 944, 4489, 2171, 11951, 8000, 5966,
		4443, 7550, 3019, 10568, 3285, 10453, 10588, 412,
		4719, 12143, 7455, 7449, 7082, 11260, 4649, 3765,
		2946, 8151, 865, 1705, 3929, 8881, 457, 1327,
		5386, 1737, 1790, 7080, 2945, 10138, 9754, 10844,
		7878, 2600, 7469, 4209, 5526, 6204, 10808, 5676,
		3090, 4670, 11194, 612, 567, 3959, 10716, 4145,
		9804, 9806, 5832, 343, 6643, 11034, 11307, 9572,
		3808, 3528, 6883, 1136, 3944, 3654, 2301, 11710,
		7596, 9929, 7211, 717, 845, 4578, 9663, 7326,
		5703, 10886, 10447, 10221, 4590, 10397, 11259, 6636,
		365, 12085, 12100, 6873, 8717, 6811, 9021, 4924,
		10345, 3982, 1882, 8611, 8520, 5002, 2827, 11113,
		1802, 7814, 6878, 11071, 11522, 193, 9757, 4883,
		5789, 12050, 7911, 10763, 9068, 9847, 10388, 4564,
		614, 8882, 10759, 4727, 8536, 10077, 8071, 68,
		63, 9998, 5287, 1826, 9282, 2455, 648, 2769,
		3469, 1226, 9449, 2429, 3154, 392, 7592, 5588,
		5900, 406, 4352, 4032, 844, 6565, 6263, 4176,
		9652, 4605, 5170, 814, 4730, 2575, 7988, 5232,
		510, 6617, 1251, 8930, 1406, 8170, 12268, 4860,
		2334, 7584, 9195, 3278, 12073, 11366, 2940, 7784,
		5043, 7383, 3045, 8062, 5662, 6330, 6226, 3961,
		6742, 10945, 3815, 1908, 6105, 10897, 879, 10754,
		2373, 3825, 6616, 3238, 5530, 10545, 12119, 5987,
		11872, 5216, 7724, 1373, 7, 10669, 11511, 9761,
		9224, 7100, 72, 4404, 11309, 5598, 10608, 9828,
		11274, 1409, 2209, 10179, 2021, 2776, 1849, 448,
		6921, 11653, 10254, 464, 11996, 4608, 11498, 11014,
		1891, 3017, 2253, 8774, 4153, 6197, 139, 6454,
		5618, 7735, 4094, 540, 8452, 4939, 5118, 5826,
	}

	huffman0 := &huffman.HuffmanCode{
		[]huffman.Pair{
			huffman.Pair{98695, 22}, /*   0: (0,-16) 0000011000000110000111 */
			huffman.Pair{24687, 20}, /*   1: (0,-15) 00000110000001101111 */
			huffman.Pair{6170, 18},  /*   2: (0,-14) 000001100000011010 */
			huffman.Pair{720, 17},   /*   3: (0,-13) 00000001011010000 */
			huffman.Pair{387, 14},   /*   4: (0,-12) 00000110000011 */
			huffman.Pair{44, 13},    /*   5: (0,-11) 0000000101100 */
			huffman.Pair{15, 11},    /*   6: (0,-10) 00000001111 */
			huffman.Pair{4, 10},     /*   7: (0,-9) 0000000100 */
			huffman.Pair{0, 9},      /*   8: (0,-8) 000000000 */
			huffman.Pair{2, 7},      /*   9: (0,-7) 0000010 */
			huffman.Pair{3, 6},      /*  10: (0,-6) 000011 */
			huffman.Pair{7, 5},      /*  11: (0,-5) 00111 */
			huffman.Pair{11, 4},     /*  12: (0,-4) 1011 */
			huffman.Pair{2, 4},      /*  13: (0,-3) 0010 */
			huffman.Pair{7, 3},      /*  14: (0,-2) 111 */
			huffman.Pair{4, 3},      /*  15: (0,-1) 100 */
			huffman.Pair{2, 3},      /*  16: (0, 0) 010 */
			huffman.Pair{3, 3},      /*  17: (0, 1) 011 */
			huffman.Pair{6, 3},      /*  18: (0, 2) 110 */
			huffman.Pair{1, 4},      /*  19: (0, 3) 0001 */
			huffman.Pair{10, 4},     /*  20: (0, 4) 1010 */
			huffman.Pair{6, 5},      /*  21: (0, 5) 00110 */
			huffman.Pair{2, 6},      /*  22: (0, 6) 000010 */
			huffman.Pair{1, 7},      /*  23: (0, 7) 0000001 */
			huffman.Pair{7, 8},      /*  24: (0, 8) 00000111 */
			huffman.Pair{3, 10},     /*  25: (0, 9) 0000000011 */
			huffman.Pair{14, 11},    /*  26: (0,10) 00000001110 */
			huffman.Pair{99, 12},    /*  27: (0,11) 000001100011 */
			huffman.Pair{386, 14},   /*  28: (0,12) 00000110000010 */
			huffman.Pair{1543, 16},  /*  29: (0,13) 0000011000000111 */
			huffman.Pair{6169, 18},  /*  30: (0,14) 000001100000011001 */
			huffman.Pair{24686, 20}, /*  31: (0,15) 00000110000001101110 */
			huffman.Pair{98694, 22}, /*  32: (0,16) 0000011000000110000110 */

			huffman.Pair{12632739, 29}, /*  33: (1,-16) 00000110000001100001010100011 */
			huffman.Pair{3158182, 27},  /*  34: (1,-15) 000001100000011000010100110 */
			huffman.Pair{789544, 25},   /*  35: (1,-14) 0000011000000110000101000 */
			huffman.Pair{197385, 23},   /*  36: (1,-13) 00000110000001100001001 */
			huffman.Pair{49345, 21},    /*  37: (1,-12) 000001100000011000001 */
			huffman.Pair{12342, 19},    /*  38: (1,-11) 0000011000000110110 */
			huffman.Pair{1447, 18},     /*  39: (1,-10) 000000010110100111 */
			huffman.Pair{722, 17},      /*  40: (1,-9) 00000001011010010 */
			huffman.Pair{770, 15},      /*  41: (1,-8) 000001100000010 */
			huffman.Pair{384, 14},      /*  42: (1,-7) 00000110000000 */
			huffman.Pair{47, 13},       /*  43: (1,-6) 0000000101111 */
			huffman.Pair{98, 12},       /*  44: (1,-5) 000001100010 */
			huffman.Pair{9, 12},        /*  45: (1,-4) 000000001001 */
			huffman.Pair{13, 11},       /*  46: (1,-3) 00000001101 */
			huffman.Pair{10, 11},       /*  47: (1,-2) 00000001010 */
			huffman.Pair{27, 10},       /*  48: (1,-1) 0000011011 */
			huffman.Pair{25, 10},       /*  49: (1, 0) 0000011001 */
			huffman.Pair{26, 10},       /*  50: (1, 1) 0000011010 */
			huffman.Pair{5, 11},        /*  51: (1, 2) 00000000101 */
			huffman.Pair{12, 11},       /*  52: (1, 3) 00000001100 */
			huffman.Pair{8, 12},        /*  53: (1, 4) 000000001000 */
			huffman.Pair{97, 12},       /*  54: (1, 5) 000001100001 */
			huffman.Pair{46, 13},       /*  55: (1, 6) 0000000101110 */
			huffman.Pair{91, 14},       /*  56: (1, 7) 00000001011011 */
			huffman.Pair{181, 15},      /*  57: (1, 8) 000000010110101 */
			huffman.Pair{721, 17},      /*  58: (1, 9) 00000001011010001 */
			huffman.Pair{1446, 18},     /*  59: (1,10) 000000010110100110 */
			huffman.Pair{12337, 19},    /*  60: (1,11) 0000011000000110001 */
			huffman.Pair{49344, 21},    /*  61: (1,12) 000001100000011000000 */
			huffman.Pair{197384, 23},   /*  62: (1,13) 00000110000001100001000 */
			huffman.Pair{394775, 24},   /*  63: (1,14) 000001100000011000010111 */
			huffman.Pair{3158181, 27},  /*  64: (1,15) 000001100000011000010100101 */
			huffman.Pair{12632738, 29}, /*  65: (1,16) 00000110000001100001010100010 */

			huffman.Pair{1632561835, 44}, /*  66: (2,-16) 101010101011 */
			huffman.Pair{816280916, 43},  /*  67: (2,-15) 10101010100 */
			huffman.Pair{204070228, 41},  /*  68: (2,-14) 101010100 */
			huffman.Pair{51017556, 39},   /*  69: (2,-13) 1010100 */
			huffman.Pair{3233979860, 37}, /*  70: (2,-12) 10100 */
			huffman.Pair{808494964, 35},  /*  71: (2,-11) 100 */
			huffman.Pair{202123740, 33},  /*  72: (2,-10) 0 */
			huffman.Pair{101061869, 32},  /*  73: (2,-9) 00000110000001100001010011101101 */
			huffman.Pair{50530933, 31},   /*  74: (2,-8) 0000011000000110000101001110101 */
			huffman.Pair{12632789, 29},   /*  75: (2,-7) 00000110000001100001011010101 */
			huffman.Pair{12632732, 29},   /*  76: (2,-6) 00000110000001100001010011100 */
			huffman.Pair{6316368, 28},    /*  77: (2,-5) 0000011000000110000101010000 */
			huffman.Pair{3158196, 27},    /*  78: (2,-4) 000001100000011000010110100 */
			huffman.Pair{3158180, 27},    /*  79: (2,-3) 000001100000011000010100100 */
			huffman.Pair{1579097, 26},    /*  80: (2,-2) 00000110000001100001011001 */
			huffman.Pair{1579095, 26},    /*  81: (2,-1) 00000110000001100001010111 */
			huffman.Pair{1579093, 26},    /*  82: (2, 0) 00000110000001100001010101 */
			huffman.Pair{1579094, 26},    /*  83: (2, 1) 00000110000001100001010110 */
			huffman.Pair{1579096, 26},    /*  84: (2, 2) 00000110000001100001011000 */
			huffman.Pair{1579099, 26},    /*  85: (2, 3) 00000110000001100001011011 */
			huffman.Pair{3158185, 27},    /*  86: (2, 4) 000001100000011000010101001 */
			huffman.Pair{6316367, 28},    /*  87: (2, 5) 0000011000000110000101001111 */
			huffman.Pair{6316395, 28},    /*  88: (2, 6) 0000011000000110000101101011 */
			huffman.Pair{12632788, 29},   /*  89: (2, 7) 00000110000001100001011010100 */
			huffman.Pair{50530932, 31},   /*  90: (2, 8) 0000011000000110000101001110100 */
			huffman.Pair{101061868, 32},  /*  91: (2, 9) 00000110000001100001010011101100 */
			huffman.Pair{101061871, 32},  /*  92: (2,10) 00000110000001100001010011101111 */
			huffman.Pair{404247483, 34},  /*  93: (2,11) 11 */
			huffman.Pair{1616989931, 36}, /*  94: (2,12) 1011 */
			huffman.Pair{2172992427, 38}, /*  95: (2,13) 101011 */
			huffman.Pair{102035115, 40},  /*  96: (2,14) 10101011 */
			huffman.Pair{408140459, 42},  /*  97: (2,15) 1010101011 */
			huffman.Pair{1632561834, 44}, /*  98: (2,16) 101010101010 */
		},
		[]huffman.Triple{
			huffman.Triple{1, 188, -1},   /*   0: */
			huffman.Triple{2, 185, -1},   /*   1: */
			huffman.Triple{3, 180, -1},   /*   2: */
			huffman.Triple{4, 179, -1},   /*   3: */
			huffman.Triple{5, 176, -1},   /*   4: */
			huffman.Triple{6, 49, -1},    /*   5: */
			huffman.Triple{7, 48, -1},    /*   6: */
			huffman.Triple{8, 17, -1},    /*   7: */
			huffman.Triple{9, 10, -1},    /*   8: */
			huffman.Triple{-1, -1, 8},    /*   9: (0,-8)  9 bits */
			huffman.Triple{11, 16, -1},   /*  10: */
			huffman.Triple{12, 15, -1},   /*  11: */
			huffman.Triple{13, 14, -1},   /*  12: */
			huffman.Triple{-1, -1, 53},   /*  13: (1, 4) 12 bits */
			huffman.Triple{-1, -1, 45},   /*  14: (1,-4) 12 bits */
			huffman.Triple{-1, -1, 51},   /*  15: (1, 2) 11 bits */
			huffman.Triple{-1, -1, 25},   /*  16: (0, 9) 10 bits */
			huffman.Triple{18, 41, -1},   /*  17: */
			huffman.Triple{19, 20, -1},   /*  18: */
			huffman.Triple{-1, -1, 7},    /*  19: (0,-9) 10 bits */
			huffman.Triple{21, 22, -1},   /*  20: */
			huffman.Triple{-1, -1, 47},   /*  21: (1,-2) 11 bits */
			huffman.Triple{23, 38, -1},   /*  22: */
			huffman.Triple{24, 25, -1},   /*  23: */
			huffman.Triple{-1, -1, 5},    /*  24: (0,-11) 13 bits */
			huffman.Triple{26, 37, -1},   /*  25: */
			huffman.Triple{27, 36, -1},   /*  26: */
			huffman.Triple{28, 31, -1},   /*  27: */
			huffman.Triple{29, 30, -1},   /*  28: */
			huffman.Triple{-1, -1, 3},    /*  29: (0,-13) 17 bits */
			huffman.Triple{-1, -1, 58},   /*  30: (1, 9) 17 bits */
			huffman.Triple{32, 33, -1},   /*  31: */
			huffman.Triple{-1, -1, 40},   /*  32: (1,-9) 17 bits */
			huffman.Triple{34, 35, -1},   /*  33: */
			huffman.Triple{-1, -1, 59},   /*  34: (1,10) 18 bits */
			huffman.Triple{-1, -1, 39},   /*  35: (1,-10) 18 bits */
			huffman.Triple{-1, -1, 57},   /*  36: (1, 8) 15 bits */
			huffman.Triple{-1, -1, 56},   /*  37: (1, 7) 14 bits */
			huffman.Triple{39, 40, -1},   /*  38: */
			huffman.Triple{-1, -1, 55},   /*  39: (1, 6) 13 bits */
			huffman.Triple{-1, -1, 43},   /*  40: (1,-6) 13 bits */
			huffman.Triple{42, 45, -1},   /*  41: */
			huffman.Triple{43, 44, -1},   /*  42: */
			huffman.Triple{-1, -1, 52},   /*  43: (1, 3) 11 bits */
			huffman.Triple{-1, -1, 46},   /*  44: (1,-3) 11 bits */
			huffman.Triple{46, 47, -1},   /*  45: */
			huffman.Triple{-1, -1, 26},   /*  46: (0,10) 11 bits */
			huffman.Triple{-1, -1, 6},    /*  47: (0,-10) 11 bits */
			huffman.Triple{-1, -1, 23},   /*  48: (0, 7)  7 bits */
			huffman.Triple{50, 51, -1},   /*  49: */
			huffman.Triple{-1, -1, 9},    /*  50: (0,-7)  7 bits */
			huffman.Triple{52, 175, -1},  /*  51: */
			huffman.Triple{53, 172, -1},  /*  52: */
			huffman.Triple{54, 171, -1},  /*  53: */
			huffman.Triple{55, 168, -1},  /*  54: */
			huffman.Triple{56, 167, -1},  /*  55: */
			huffman.Triple{57, 164, -1},  /*  56: */
			huffman.Triple{58, 59, -1},   /*  57: */
			huffman.Triple{-1, -1, 42},   /*  58: (1,-7) 14 bits */
			huffman.Triple{60, 61, -1},   /*  59: */
			huffman.Triple{-1, -1, 41},   /*  60: (1,-8) 15 bits */
			huffman.Triple{62, 163, -1},  /*  61: */
			huffman.Triple{63, 156, -1},  /*  62: */
			huffman.Triple{64, 155, -1},  /*  63: */
			huffman.Triple{65, 154, -1},  /*  64: */
			huffman.Triple{66, 69, -1},   /*  65: */
			huffman.Triple{67, 68, -1},   /*  66: */
			huffman.Triple{-1, -1, 61},   /*  67: (1,12) 21 bits */
			huffman.Triple{-1, -1, 37},   /*  68: (1,-12) 21 bits */
			huffman.Triple{70, 151, -1},  /*  69: */
			huffman.Triple{71, 74, -1},   /*  70: */
			huffman.Triple{72, 73, -1},   /*  71: */
			huffman.Triple{-1, -1, 62},   /*  72: (1,13) 23 bits */
			huffman.Triple{-1, -1, 36},   /*  73: (1,-13) 23 bits */
			huffman.Triple{75, 136, -1},  /*  74: */
			huffman.Triple{76, 123, -1},  /*  75: */
			huffman.Triple{77, 78, -1},   /*  76: */
			huffman.Triple{-1, -1, 35},   /*  77: (1,-14) 25 bits */
			huffman.Triple{79, 82, -1},   /*  78: */
			huffman.Triple{80, 81, -1},   /*  79: */
			huffman.Triple{-1, -1, 79},   /*  80: (2,-3) 27 bits */
			huffman.Triple{-1, -1, 64},   /*  81: (1,15) 27 bits */
			huffman.Triple{83, 84, -1},   /*  82: */
			huffman.Triple{-1, -1, 34},   /*  83: (1,-15) 27 bits */
			huffman.Triple{85, 122, -1},  /*  84: */
			huffman.Triple{86, 87, -1},   /*  85: */
			huffman.Triple{-1, -1, 76},   /*  86: (2,-6) 29 bits */
			huffman.Triple{88, 91, -1},   /*  87: */
			huffman.Triple{89, 90, -1},   /*  88: */
			huffman.Triple{-1, -1, 90},   /*  89: (2, 8) 31 bits */
			huffman.Triple{-1, -1, 74},   /*  90: (2,-8) 31 bits */
			huffman.Triple{92, 95, -1},   /*  91: */
			huffman.Triple{93, 94, -1},   /*  92: */
			huffman.Triple{-1, -1, 91},   /*  93: (2, 9) 32 bits */
			huffman.Triple{-1, -1, 73},   /*  94: (2,-9) 32 bits */
			huffman.Triple{96, 121, -1},  /*  95: */
			huffman.Triple{97, 98, -1},   /*  96: */
			huffman.Triple{-1, -1, 72},   /*  97: (2,-10) 33 bits */
			huffman.Triple{99, 120, -1},  /*  98: */
			huffman.Triple{100, 101, -1}, /*  99: */
			huffman.Triple{-1, -1, 71},   /* 100: (2,-11) 35 bits */
			huffman.Triple{102, 119, -1}, /* 101: */
			huffman.Triple{103, 104, -1}, /* 102: */
			huffman.Triple{-1, -1, 70},   /* 103: (2,-12) 37 bits */
			huffman.Triple{105, 118, -1}, /* 104: */
			huffman.Triple{106, 107, -1}, /* 105: */
			huffman.Triple{-1, -1, 69},   /* 106: (2,-13) 39 bits */
			huffman.Triple{108, 117, -1}, /* 107: */
			huffman.Triple{109, 110, -1}, /* 108: */
			huffman.Triple{-1, -1, 68},   /* 109: (2,-14) 41 bits */
			huffman.Triple{111, 116, -1}, /* 110: */
			huffman.Triple{112, 113, -1}, /* 111: */
			huffman.Triple{-1, -1, 67},   /* 112: (2,-15) 43 bits */
			huffman.Triple{114, 115, -1}, /* 113: */
			huffman.Triple{-1, -1, 98},   /* 114: (2,16) 44 bits */
			huffman.Triple{-1, -1, 66},   /* 115: (2,-16) 44 bits */
			huffman.Triple{-1, -1, 97},   /* 116: (2,15) 42 bits */
			huffman.Triple{-1, -1, 96},   /* 117: (2,14) 40 bits */
			huffman.Triple{-1, -1, 95},   /* 118: (2,13) 38 bits */
			huffman.Triple{-1, -1, 94},   /* 119: (2,12) 36 bits */
			huffman.Triple{-1, -1, 93},   /* 120: (2,11) 34 bits */
			huffman.Triple{-1, -1, 92},   /* 121: (2,10) 32 bits */
			huffman.Triple{-1, -1, 87},   /* 122: (2, 5) 28 bits */
			huffman.Triple{124, 133, -1}, /* 123: */
			huffman.Triple{125, 132, -1}, /* 124: */
			huffman.Triple{126, 131, -1}, /* 125: */
			huffman.Triple{127, 128, -1}, /* 126: */
			huffman.Triple{-1, -1, 77},   /* 127: (2,-5) 28 bits */
			huffman.Triple{129, 130, -1}, /* 128: */
			huffman.Triple{-1, -1, 65},   /* 129: (1,16) 29 bits */
			huffman.Triple{-1, -1, 33},   /* 130: (1,-16) 29 bits */
			huffman.Triple{-1, -1, 86},   /* 131: (2, 4) 27 bits */
			huffman.Triple{-1, -1, 82},   /* 132: (2, 0) 26 bits */
			huffman.Triple{134, 135, -1}, /* 133: */
			huffman.Triple{-1, -1, 83},   /* 134: (2, 1) 26 bits */
			huffman.Triple{-1, -1, 81},   /* 135: (2,-1) 26 bits */
			huffman.Triple{137, 150, -1}, /* 136: */
			huffman.Triple{138, 141, -1}, /* 137: */
			huffman.Triple{139, 140, -1}, /* 138: */
			huffman.Triple{-1, -1, 84},   /* 139: (2, 2) 26 bits */
			huffman.Triple{-1, -1, 80},   /* 140: (2,-2) 26 bits */
			huffman.Triple{142, 149, -1}, /* 141: */
			huffman.Triple{143, 144, -1}, /* 142: */
			huffman.Triple{-1, -1, 78},   /* 143: (2,-4) 27 bits */
			huffman.Triple{145, 148, -1}, /* 144: */
			huffman.Triple{146, 147, -1}, /* 145: */
			huffman.Triple{-1, -1, 89},   /* 146: (2, 7) 29 bits */
			huffman.Triple{-1, -1, 75},   /* 147: (2,-7) 29 bits */
			huffman.Triple{-1, -1, 88},   /* 148: (2, 6) 28 bits */
			huffman.Triple{-1, -1, 85},   /* 149: (2, 3) 26 bits */
			huffman.Triple{-1, -1, 63},   /* 150: (1,14) 24 bits */
			huffman.Triple{152, 153, -1}, /* 151: */
			huffman.Triple{-1, -1, 32},   /* 152: (0,16) 22 bits */
			huffman.Triple{-1, -1, 0},    /* 153: (0,-16) 22 bits */
			huffman.Triple{-1, -1, 60},   /* 154: (1,11) 19 bits */
			huffman.Triple{-1, -1, 30},   /* 155: (0,14) 18 bits */
			huffman.Triple{157, 158, -1}, /* 156: */
			huffman.Triple{-1, -1, 2},    /* 157: (0,-14) 18 bits */
			huffman.Triple{159, 160, -1}, /* 158: */
			huffman.Triple{-1, -1, 38},   /* 159: (1,-11) 19 bits */
			huffman.Triple{161, 162, -1}, /* 160: */
			huffman.Triple{-1, -1, 31},   /* 161: (0,15) 20 bits */
			huffman.Triple{-1, -1, 1},    /* 162: (0,-15) 20 bits */
			huffman.Triple{-1, -1, 29},   /* 163: (0,13) 16 bits */
			huffman.Triple{165, 166, -1}, /* 164: */
			huffman.Triple{-1, -1, 28},   /* 165: (0,12) 14 bits */
			huffman.Triple{-1, -1, 4},    /* 166: (0,-12) 14 bits */
			huffman.Triple{-1, -1, 54},   /* 167: (1, 5) 12 bits */
			huffman.Triple{169, 170, -1}, /* 168: */
			huffman.Triple{-1, -1, 44},   /* 169: (1,-5) 12 bits */
			huffman.Triple{-1, -1, 27},   /* 170: (0,11) 12 bits */
			huffman.Triple{-1, -1, 49},   /* 171: (1, 0) 10 bits */
			huffman.Triple{173, 174, -1}, /* 172: */
			huffman.Triple{-1, -1, 50},   /* 173: (1, 1) 10 bits */
			huffman.Triple{-1, -1, 48},   /* 174: (1,-1) 10 bits */
			huffman.Triple{-1, -1, 24},   /* 175: (0, 8)  8 bits */
			huffman.Triple{177, 178, -1}, /* 176: */
			huffman.Triple{-1, -1, 22},   /* 177: (0, 6)  6 bits */
			huffman.Triple{-1, -1, 10},   /* 178: (0,-6)  6 bits */
			huffman.Triple{-1, -1, 19},   /* 179: (0, 3)  4 bits */
			huffman.Triple{181, 182, -1}, /* 180: */
			huffman.Triple{-1, -1, 13},   /* 181: (0,-3)  4 bits */
			huffman.Triple{183, 184, -1}, /* 182: */
			huffman.Triple{-1, -1, 21},   /* 183: (0, 5)  5 bits */
			huffman.Triple{-1, -1, 11},   /* 184: (0,-5)  5 bits */
			huffman.Triple{186, 187, -1}, /* 185: */
			huffman.Triple{-1, -1, 16},   /* 186: (0, 0)  3 bits */
			huffman.Triple{-1, -1, 17},   /* 187: (0, 1)  3 bits */
			huffman.Triple{189, 194, -1}, /* 188: */
			huffman.Triple{190, 191, -1}, /* 189: */
			huffman.Triple{-1, -1, 15},   /* 190: (0,-1)  3 bits */
			huffman.Triple{192, 193, -1}, /* 191: */
			huffman.Triple{-1, -1, 20},   /* 192: (0, 4)  4 bits */
			huffman.Triple{-1, -1, 12},   /* 193: (0,-4)  4 bits */
			huffman.Triple{195, 196, -1}, /* 194: */
			huffman.Triple{-1, -1, 18},   /* 195: (0, 2)  3 bits */
			huffman.Triple{-1, -1, 14},   /* 196: (0,-2)  3 bits */
		},
	}

	huffman1 := &huffman.HuffmanCode{
		[]huffman.Pair{
			{1665896, 21}, /*   0: (0,-2) 110010110101101101000 */
			{24, 5},       /*   1: (0,-1) 11000 */
			{0, 1},        /*   2: (0, 0) 0 */
			{13, 4},       /*   3: (0, 1) 1101 */
			{832949, 20},  /*   4: (0, 2) 11001011010110110101 */

			{6663588, 23}, /*   5: (1,-2) 11001011010110110100100 */
			{100, 7},      /*   6: (1,-1) 1100100 */
			{2, 2},        /*   7: (1, 0) 10 */
			{51, 6},       /*   8: (1, 1) 110011 */
			{3331795, 22}, /*   9: (1, 2) 1100101101011011010011 */

			{53308712, 26}, /*  10: (2,-2) 11001011010110110100101000 */
			{812, 10},      /*  11: (2,-1) 1100101100 */
			{7, 3},         /*  12: (2, 0) 111 */
			{407, 9},       /*  13: (2, 1) 110010111 */
			{26654359, 25}, /*  14: (2, 2) 1100101101011011010010111 */

			{213234852, 28}, /*  15: (3,-2) 1100101101011011010010100100 */
			{3252, 12},      /*  16: (3,-1) 110010110100 */
			{202, 8},        /*  17: (3, 0) 11001010 */
			{1627, 11},      /*  18: (3, 1) 11001011011 */
			{106617427, 27}, /*  19: (3, 2) 110010110101101101001010011 */

			{3411757660, 32}, /*  20: (4,-2) 11001011010110110100101001011100 */
			{26028, 15},      /*  21: (4,-1) 110010110101100 */
			{6506, 13},       /*  22: (4, 0) 1100101101010 */
			{13015, 14},      /*  23: (4, 1) 11001011010111 */
			{1705878831, 31}, /*  24: (4, 2) 1100101101011011010010100101111 */

			{762128756, 34},  /*  25: (5,-2) 00 */
			{208236, 18},     /*  26: (5,-1) 110010110101101100 */
			{52058, 16},      /*  27: (5, 0) 1100101101011010 */
			{104119, 17},     /*  28: (5, 1) 11001011010110111 */
			{2528548027, 33}, /*  29: (5, 2) 1 */

			{3048515028, 36}, /*  30: (6,-2) 0100 */
			{26654358, 25},   /*  31: (6,-1) 1100101101011011010010110 */
			{416475, 19},     /*  32: (6, 0) 1100101101011011011 */
			{26654357, 25},   /*  33: (6, 1) 1100101101011011010010101 */
			{1524257515, 35}, /*  34: (6, 2) 011 */

			{3604125524, 38}, /*  35: (7,-2) 010100 */
			{1705878829, 31}, /*  36: (7,-1) 1100101101011011010010100101101 */
			{426469706, 29},  /*  37: (7, 0) 11001011010110110100101001010 */
			{1705878828, 31}, /*  38: (7, 1) 1100101101011011010010100101100 */
			{1802062763, 37}, /*  39: (7, 2) 01011 */

			{3063200425, 41}, /*  40: (8,-2) 010101001 */
			{3063200424, 41}, /*  41: (8,-1) 010101000 */
			{1531600215, 40}, /*  42: (8, 0) 01010111 */
			{1531600214, 40}, /*  43: (8, 1) 01010110 */
			{1531600213, 40}, /*  44: (8, 2) 01010101 */
		},
		[]huffman.Triple{
			huffman.Triple{1, 2, -1},   /*   0: */
			huffman.Triple{-1, -1, 2},  /*   1: (0, 0)  1 bit  */
			huffman.Triple{3, 4, -1},   /*   2: */
			huffman.Triple{-1, -1, 7},  /*   3: (1, 0)  2 bits */
			huffman.Triple{5, 88, -1},  /*   4: */
			huffman.Triple{6, 87, -1},  /*   5: */
			huffman.Triple{7, 8, -1},   /*   6: */
			huffman.Triple{-1, -1, 1},  /*   7: (0,-1)  5 bits */
			huffman.Triple{9, 86, -1},  /*   8: */
			huffman.Triple{10, 11, -1}, /*   9: */
			huffman.Triple{-1, -1, 6},  /*  10: (1,-1)  7 bits */
			huffman.Triple{12, 13, -1}, /*  11: */
			huffman.Triple{-1, -1, 17}, /*  12: (3, 0)  8 bits */
			huffman.Triple{14, 85, -1}, /*  13: */
			huffman.Triple{15, 16, -1}, /*  14: */
			huffman.Triple{-1, -1, 11}, /*  15: (2,-1) 10 bits */
			huffman.Triple{17, 84, -1}, /*  16: */
			huffman.Triple{18, 19, -1}, /*  17: */
			huffman.Triple{-1, -1, 16}, /*  18: (3,-1) 12 bits */
			huffman.Triple{20, 21, -1}, /*  19: */
			huffman.Triple{-1, -1, 22}, /*  20: (4, 0) 13 bits */
			huffman.Triple{22, 83, -1}, /*  21: */
			huffman.Triple{23, 24, -1}, /*  22: */
			huffman.Triple{-1, -1, 21}, /*  23: (4,-1) 15 bits */
			huffman.Triple{25, 26, -1}, /*  24: */
			huffman.Triple{-1, -1, 27}, /*  25: (5, 0) 16 bits */
			huffman.Triple{27, 82, -1}, /*  26: */
			huffman.Triple{28, 29, -1}, /*  27: */
			huffman.Triple{-1, -1, 26}, /*  28: (5,-1) 18 bits */
			huffman.Triple{30, 81, -1}, /*  29: */
			huffman.Triple{31, 80, -1}, /*  30: */
			huffman.Triple{32, 33, -1}, /*  31: */
			huffman.Triple{-1, -1, 0},  /*  32: (0,-2) 21 bits */
			huffman.Triple{34, 79, -1}, /*  33: */
			huffman.Triple{35, 36, -1}, /*  34: */
			huffman.Triple{-1, -1, 5},  /*  35: (1,-2) 23 bits */
			huffman.Triple{37, 76, -1}, /*  36: */
			huffman.Triple{38, 75, -1}, /*  37: */
			huffman.Triple{39, 40, -1}, /*  38: */
			huffman.Triple{-1, -1, 10}, /*  39: (2,-2) 26 bits */
			huffman.Triple{41, 74, -1}, /*  40: */
			huffman.Triple{42, 43, -1}, /*  41: */
			huffman.Triple{-1, -1, 15}, /*  42: (3,-2) 28 bits */
			huffman.Triple{44, 45, -1}, /*  43: */
			huffman.Triple{-1, -1, 37}, /*  44: (7, 0) 29 bits */
			huffman.Triple{46, 49, -1}, /*  45: */
			huffman.Triple{47, 48, -1}, /*  46: */
			huffman.Triple{-1, -1, 38}, /*  47: (7, 1) 31 bits */
			huffman.Triple{-1, -1, 36}, /*  48: (7,-1) 31 bits */
			huffman.Triple{50, 73, -1}, /*  49: */
			huffman.Triple{51, 52, -1}, /*  50: */
			huffman.Triple{-1, -1, 20}, /*  51: (4,-2) 32 bits */
			huffman.Triple{53, 72, -1}, /*  52: */
			huffman.Triple{54, 55, -1}, /*  53: */
			huffman.Triple{-1, -1, 25}, /*  54: (5,-2) 34 bits */
			huffman.Triple{56, 71, -1}, /*  55: */
			huffman.Triple{57, 58, -1}, /*  56: */
			huffman.Triple{-1, -1, 30}, /*  57: (6,-2) 36 bits */
			huffman.Triple{59, 70, -1}, /*  58: */
			huffman.Triple{60, 61, -1}, /*  59: */
			huffman.Triple{-1, -1, 35}, /*  60: (7,-2) 38 bits */
			huffman.Triple{62, 67, -1}, /*  61: */
			huffman.Triple{63, 66, -1}, /*  62: */
			huffman.Triple{64, 65, -1}, /*  63: */
			huffman.Triple{-1, -1, 41}, /*  64: (8,-1) 41 bits */
			huffman.Triple{-1, -1, 40}, /*  65: (8,-2) 41 bits */
			huffman.Triple{-1, -1, 44}, /*  66: (8, 2) 40 bits */
			huffman.Triple{68, 69, -1}, /*  67: */
			huffman.Triple{-1, -1, 43}, /*  68: (8, 1) 40 bits */
			huffman.Triple{-1, -1, 42}, /*  69: (8, 0) 40 bits */
			huffman.Triple{-1, -1, 39}, /*  70: (7, 2) 37 bits */
			huffman.Triple{-1, -1, 34}, /*  71: (6, 2) 35 bits */
			huffman.Triple{-1, -1, 29}, /*  72: (5, 2) 33 bits */
			huffman.Triple{-1, -1, 24}, /*  73: (4, 2) 31 bits */
			huffman.Triple{-1, -1, 19}, /*  74: (3, 2) 27 bits */
			huffman.Triple{-1, -1, 33}, /*  75: (6, 1) 25 bits */
			huffman.Triple{77, 78, -1}, /*  76: */
			huffman.Triple{-1, -1, 31}, /*  77: (6,-1) 25 bits */
			huffman.Triple{-1, -1, 14}, /*  78: (2, 2) 25 bits */
			huffman.Triple{-1, -1, 9},  /*  79: (1, 2) 22 bits */
			huffman.Triple{-1, -1, 4},  /*  80: (0, 2) 20 bits */
			huffman.Triple{-1, -1, 32}, /*  81: (6, 0) 19 bits */
			huffman.Triple{-1, -1, 28}, /*  82: (5, 1) 17 bits */
			huffman.Triple{-1, -1, 23}, /*  83: (4, 1) 14 bits */
			huffman.Triple{-1, -1, 18}, /*  84: (3, 1) 11 bits */
			huffman.Triple{-1, -1, 13}, /*  85: (2, 1)  9 bits */
			huffman.Triple{-1, -1, 8},  /*  86: (1, 1)  6 bits */
			huffman.Triple{-1, -1, 3},  /*  87: (0, 1)  4 bits */
			huffman.Triple{-1, -1, 12}, /*  88: (2, 0)  3 bits */
		},
	}

	huffman2 := &huffman.HuffmanCode{
		[]huffman.Pair{

			huffman.Pair{24, 5}, /*   0: (0,-1) 11000 */
			huffman.Pair{0, 1},  /*   1: (0, 0) 0 */
			huffman.Pair{13, 4}, /*   2: (0, 1) 1101 */

			huffman.Pair{100, 7}, /*   3: (1,-1) 1100100 */
			huffman.Pair{2, 2},   /*   4: (1, 0) 10 */
			huffman.Pair{51, 6},  /*   5: (1, 1) 110011 */

			huffman.Pair{404, 9}, /*   6: (2,-1) 110010100 */
			huffman.Pair{7, 3},   /*   7: (2, 0) 111 */
			huffman.Pair{203, 8}, /*   8: (2, 1) 11001011 */

			huffman.Pair{3244, 12}, /*   9: (3,-1) 110010101100 */
			huffman.Pair{810, 10},  /*  10: (3, 0) 1100101010 */
			huffman.Pair{1623, 11}, /*  11: (3, 1) 11001010111 */

			huffman.Pair{51921, 16}, /*  12: (4,-1) 1100101011010001 */
			huffman.Pair{51920, 16}, /*  13: (4, 0) 1100101011010000 */
			huffman.Pair{25967, 15}, /*  14: (4, 1) 110010101101111 */

			huffman.Pair{25966, 15}, /*  15: (5,-1) 110010101101110 */
			huffman.Pair{25965, 15}, /*  16: (5, 0) 110010101101101 */
			huffman.Pair{25964, 15}, /*  17: (5, 1) 110010101101100 */

			huffman.Pair{25963, 15}, /*  18: (6,-1) 110010101101011 */
			huffman.Pair{25962, 15}, /*  19: (6, 0) 110010101101010 */
			huffman.Pair{25961, 15}, /*  20: (6, 1) 110010101101001 */

		},
		[]huffman.Triple{
			huffman.Triple{1, 2, -1},   /*   0: */
			huffman.Triple{-1, -1, 1},  /*   1: (0, 0)  1 bit  */
			huffman.Triple{3, 4, -1},   /*   2: */
			huffman.Triple{-1, -1, 4},  /*   3: (1, 0)  2 bits */
			huffman.Triple{5, 40, -1},  /*   4: */
			huffman.Triple{6, 39, -1},  /*   5: */
			huffman.Triple{7, 8, -1},   /*   6: */
			huffman.Triple{-1, -1, 0},  /*   7: (0,-1)  5 bits */
			huffman.Triple{9, 38, -1},  /*   8: */
			huffman.Triple{10, 11, -1}, /*   9: */
			huffman.Triple{-1, -1, 3},  /*  10: (1,-1)  7 bits */
			huffman.Triple{12, 37, -1}, /*  11: */
			huffman.Triple{13, 14, -1}, /*  12: */
			huffman.Triple{-1, -1, 6},  /*  13: (2,-1)  9 bits */
			huffman.Triple{15, 16, -1}, /*  14: */
			huffman.Triple{-1, -1, 10}, /*  15: (3, 0) 10 bits */
			huffman.Triple{17, 36, -1}, /*  16: */
			huffman.Triple{18, 19, -1}, /*  17: */
			huffman.Triple{-1, -1, 9},  /*  18: (3,-1) 12 bits */
			huffman.Triple{20, 29, -1}, /*  19: */
			huffman.Triple{21, 26, -1}, /*  20: */
			huffman.Triple{22, 25, -1}, /*  21: */
			huffman.Triple{23, 24, -1}, /*  22: */
			huffman.Triple{-1, -1, 13}, /*  23: (4, 0) 16 bits */
			huffman.Triple{-1, -1, 12}, /*  24: (4,-1) 16 bits */
			huffman.Triple{-1, -1, 20}, /*  25: (6, 1) 15 bits */
			huffman.Triple{27, 28, -1}, /*  26: */
			huffman.Triple{-1, -1, 19}, /*  27: (6, 0) 15 bits */
			huffman.Triple{-1, -1, 18}, /*  28: (6,-1) 15 bits */
			huffman.Triple{30, 33, -1}, /*  29: */
			huffman.Triple{31, 32, -1}, /*  30: */
			huffman.Triple{-1, -1, 17}, /*  31: (5, 1) 15 bits */
			huffman.Triple{-1, -1, 16}, /*  32: (5, 0) 15 bits */
			huffman.Triple{34, 35, -1}, /*  33: */
			huffman.Triple{-1, -1, 15}, /*  34: (5,-1) 15 bits */
			huffman.Triple{-1, -1, 14}, /*  35: (4, 1) 15 bits */
			huffman.Triple{-1, -1, 11}, /*  36: (3, 1) 11 bits */
			huffman.Triple{-1, -1, 8},  /*  37: (2, 1)  8 bits */
			huffman.Triple{-1, -1, 5},  /*  38: (1, 1)  6 bits */
			huffman.Triple{-1, -1, 2},  /*  39: (0, 1)  4 bits */
			huffman.Triple{-1, -1, 7},  /*  40: (2, 0)  3 bits */
		},
	}

	huffman3 := &huffman.HuffmanCode{
		[]huffman.Pair{
			huffman.Pair{480170, 21}, /*   0: (0,-3) 001110101001110101010 */
			huffman.Pair{119, 9},     /*   1: (0,-2) 001110111 */
			huffman.Pair{3, 3},       /*   2: (0,-1) 011 */
			huffman.Pair{1, 1},       /*   3: (0, 0) 1 */
			huffman.Pair{2, 3},       /*   4: (0, 1) 010 */
			huffman.Pair{118, 9},     /*   5: (0, 2) 001110110 */
			huffman.Pair{240087, 20}, /*   6: (0, 3) 00111010100111010111 */

			huffman.Pair{1920684, 23}, /*   7: (1,-3) 00111010100111010101100 */
			huffman.Pair{936, 12},     /*   8: (1,-2) 001110101000 */
			huffman.Pair{5, 5},        /*   9: (1,-1) 00101 */
			huffman.Pair{0, 3},        /*  10: (1, 0) 000 */
			huffman.Pair{4, 5},        /*  11: (1, 1) 00100 */
			huffman.Pair{471, 11},     /*  12: (1, 2) 00111010111 */
			huffman.Pair{960347, 22},  /*  13: (1, 3) 0011101010011101011011 */

			huffman.Pair{7682740, 25}, /*  14: (2,-3) 0011101010011101010110100 */
			huffman.Pair{3749, 14},    /*  15: (2,-2) 00111010100101 */
			huffman.Pair{28, 7},       /*  16: (2,-1) 0011100 */
			huffman.Pair{6, 5},        /*  17: (2, 0) 00110 */
			huffman.Pair{15, 6},       /*  18: (2, 1) 001111 */
			huffman.Pair{3748, 14},    /*  19: (2, 2) 00111010100100 */
			huffman.Pair{3841371, 24}, /*  20: (2, 3) 001110101001110101011011 */

			huffman.Pair{61461930, 28}, /*  21: (3,-3) 0011101010011101010110101010 */
			huffman.Pair{60020, 18},    /*  22: (3,-2) 001110101001110100 */
			huffman.Pair{470, 11},      /*  23: (3,-1) 00111010110 */
			huffman.Pair{116, 9},       /*  24: (3, 0) 001110100 */
			huffman.Pair{469, 11},      /*  25: (3, 1) 00111010101 */
			huffman.Pair{30011, 17},    /*  26: (3, 2) 00111010100111011 */
			huffman.Pair{61461929, 28}, /*  27: (3, 3) 0011101010011101010110101001 */

			huffman.Pair{983390900, 32}, /*  28: (4,-3) 00111010100111010101101010110100 */
			huffman.Pair{960346, 22},    /*  29: (4,-2) 0011101010011101011010 */
			huffman.Pair{15004, 16},     /*  30: (4,-1) 0011101010011100 */
			huffman.Pair{3750, 14},      /*  31: (4, 0) 00111010100110 */
			huffman.Pair{7503, 15},      /*  32: (4, 1) 001110101001111 */
			huffman.Pair{960345, 22},    /*  33: (4, 2) 0011101010011101011001 */
			huffman.Pair{491695451, 31}, /*  34: (4, 3) 0011101010011101010110101011011 */

			huffman.Pair{2849352532, 36}, /*  35: (5,-3) 0100 */
			huffman.Pair{61461928, 28},   /*  36: (5,-2) 0011101010011101010110101000 */
			huffman.Pair{960344, 22},     /*  37: (5,-1) 0011101010011101011000 */
			huffman.Pair{240084, 20},     /*  38: (5, 0) 00111010100111010100 */
			huffman.Pair{960343, 22},     /*  39: (5, 1) 0011101010011101010111 */
			huffman.Pair{30730967, 27},   /*  40: (5, 2) 001110101001110101011010111 */
			huffman.Pair{3572159915, 35}, /*  41: (5, 3) 011 */

			huffman.Pair{1403737771, 37}, /*  42: (6,-3) 01011 */
			huffman.Pair{3933563604, 34}, /*  43: (6,-2) 00 */
			huffman.Pair{245847724, 30},  /*  44: (6,-1) 001110101001110101011010101100 */
			huffman.Pair{30730966, 27},   /*  45: (6, 0) 001110101001110101011010110 */
			huffman.Pair{122923863, 29},  /*  46: (6, 1) 00111010100111010101101010111 */
			huffman.Pair{1966781803, 33}, /*  47: (6, 2) 1 */
			huffman.Pair{1403737770, 37}, /*  48: (6, 3) 01010 */
		},
		[]huffman.Triple{
			huffman.Triple{1, 96, -1},  /*   0: */
			huffman.Triple{2, 93, -1},  /*   1: */
			huffman.Triple{3, 4, -1},   /*   2: */
			huffman.Triple{-1, -1, 10}, /*   3: (1, 0)  3 bits */
			huffman.Triple{5, 8, -1},   /*   4: */
			huffman.Triple{6, 7, -1},   /*   5: */
			huffman.Triple{-1, -1, 11}, /*   6: (1, 1)  5 bits */
			huffman.Triple{-1, -1, 9},  /*   7: (1,-1)  5 bits */
			huffman.Triple{9, 10, -1},  /*   8: */
			huffman.Triple{-1, -1, 17}, /*   9: (2, 0)  5 bits */
			huffman.Triple{11, 92, -1}, /*  10: */
			huffman.Triple{12, 13, -1}, /*  11: */
			huffman.Triple{-1, -1, 16}, /*  12: (2,-1)  7 bits */
			huffman.Triple{14, 89, -1}, /*  13: */
			huffman.Triple{15, 16, -1}, /*  14: */
			huffman.Triple{-1, -1, 24}, /*  15: (3, 0)  9 bits */
			huffman.Triple{17, 86, -1}, /*  16: */
			huffman.Triple{18, 85, -1}, /*  17: */
			huffman.Triple{19, 20, -1}, /*  18: */
			huffman.Triple{-1, -1, 8},  /*  19: (1,-2) 12 bits */
			huffman.Triple{21, 24, -1}, /*  20: */
			huffman.Triple{22, 23, -1}, /*  21: */
			huffman.Triple{-1, -1, 19}, /*  22: (2, 2) 14 bits */
			huffman.Triple{-1, -1, 15}, /*  23: (2,-2) 14 bits */
			huffman.Triple{25, 26, -1}, /*  24: */
			huffman.Triple{-1, -1, 31}, /*  25: (4, 0) 14 bits */
			huffman.Triple{27, 84, -1}, /*  26: */
			huffman.Triple{28, 29, -1}, /*  27: */
			huffman.Triple{-1, -1, 30}, /*  28: (4,-1) 16 bits */
			huffman.Triple{30, 83, -1}, /*  29: */
			huffman.Triple{31, 32, -1}, /*  30: */
			huffman.Triple{-1, -1, 22}, /*  31: (3,-2) 18 bits */
			huffman.Triple{33, 74, -1}, /*  32: */
			huffman.Triple{34, 35, -1}, /*  33: */
			huffman.Triple{-1, -1, 38}, /*  34: (5, 0) 20 bits */
			huffman.Triple{36, 37, -1}, /*  35: */
			huffman.Triple{-1, -1, 0},  /*  36: (0,-3) 21 bits */
			huffman.Triple{38, 73, -1}, /*  37: */
			huffman.Triple{39, 40, -1}, /*  38: */
			huffman.Triple{-1, -1, 7},  /*  39: (1,-3) 23 bits */
			huffman.Triple{41, 72, -1}, /*  40: */
			huffman.Triple{42, 43, -1}, /*  41: */
			huffman.Triple{-1, -1, 14}, /*  42: (2,-3) 25 bits */
			huffman.Triple{44, 69, -1}, /*  43: */
			huffman.Triple{45, 48, -1}, /*  44: */
			huffman.Triple{46, 47, -1}, /*  45: */
			huffman.Triple{-1, -1, 36}, /*  46: (5,-2) 28 bits */
			huffman.Triple{-1, -1, 27}, /*  47: (3, 3) 28 bits */
			huffman.Triple{49, 50, -1}, /*  48: */
			huffman.Triple{-1, -1, 21}, /*  49: (3,-3) 28 bits */
			huffman.Triple{51, 68, -1}, /*  50: */
			huffman.Triple{52, 53, -1}, /*  51: */
			huffman.Triple{-1, -1, 44}, /*  52: (6,-1) 30 bits */
			huffman.Triple{54, 67, -1}, /*  53: */
			huffman.Triple{55, 56, -1}, /*  54: */
			huffman.Triple{-1, -1, 28}, /*  55: (4,-3) 32 bits */
			huffman.Triple{57, 66, -1}, /*  56: */
			huffman.Triple{58, 59, -1}, /*  57: */
			huffman.Triple{-1, -1, 43}, /*  58: (6,-2) 34 bits */
			huffman.Triple{60, 65, -1}, /*  59: */
			huffman.Triple{61, 62, -1}, /*  60: */
			huffman.Triple{-1, -1, 35}, /*  61: (5,-3) 36 bits */
			huffman.Triple{63, 64, -1}, /*  62: */
			huffman.Triple{-1, -1, 48}, /*  63: (6, 3) 37 bits */
			huffman.Triple{-1, -1, 42}, /*  64: (6,-3) 37 bits */
			huffman.Triple{-1, -1, 41}, /*  65: (5, 3) 35 bits */
			huffman.Triple{-1, -1, 47}, /*  66: (6, 2) 33 bits */
			huffman.Triple{-1, -1, 34}, /*  67: (4, 3) 31 bits */
			huffman.Triple{-1, -1, 46}, /*  68: (6, 1) 29 bits */
			huffman.Triple{70, 71, -1}, /*  69: */
			huffman.Triple{-1, -1, 45}, /*  70: (6, 0) 27 bits */
			huffman.Triple{-1, -1, 40}, /*  71: (5, 2) 27 bits */
			huffman.Triple{-1, -1, 20}, /*  72: (2, 3) 24 bits */
			huffman.Triple{-1, -1, 39}, /*  73: (5, 1) 22 bits */
			huffman.Triple{75, 82, -1}, /*  74: */
			huffman.Triple{76, 79, -1}, /*  75: */
			huffman.Triple{77, 78, -1}, /*  76: */
			huffman.Triple{-1, -1, 37}, /*  77: (5,-1) 22 bits */
			huffman.Triple{-1, -1, 33}, /*  78: (4, 2) 22 bits */
			huffman.Triple{80, 81, -1}, /*  79: */
			huffman.Triple{-1, -1, 29}, /*  80: (4,-2) 22 bits */
			huffman.Triple{-1, -1, 13}, /*  81: (1, 3) 22 bits */
			huffman.Triple{-1, -1, 6},  /*  82: (0, 3) 20 bits */
			huffman.Triple{-1, -1, 26}, /*  83: (3, 2) 17 bits */
			huffman.Triple{-1, -1, 32}, /*  84: (4, 1) 15 bits */
			huffman.Triple{-1, -1, 25}, /*  85: (3, 1) 11 bits */
			huffman.Triple{87, 88, -1}, /*  86: */
			huffman.Triple{-1, -1, 23}, /*  87: (3,-1) 11 bits */
			huffman.Triple{-1, -1, 12}, /*  88: (1, 2) 11 bits */
			huffman.Triple{90, 91, -1}, /*  89: */
			huffman.Triple{-1, -1, 5},  /*  90: (0, 2)  9 bits */
			huffman.Triple{-1, -1, 1},  /*  91: (0,-2)  9 bits */
			huffman.Triple{-1, -1, 18}, /*  92: (2, 1)  6 bits */
			huffman.Triple{94, 95, -1}, /*  93: */
			huffman.Triple{-1, -1, 4},  /*  94: (0, 1)  3 bits */
			huffman.Triple{-1, -1, 2},  /*  95: (0,-1)  3 bits */
			huffman.Triple{-1, -1, 3},  /*  96: (0, 0)  1 bit  */
		},
	}

	huffman4 := &huffman.HuffmanCode{
		[]huffman.Pair{
			huffman.Pair{16073140, 24}, /*   0: (0,-6) 111101010100000110110100 */
			huffman.Pair{125570, 17},   /*   1: (0,-5) 11110101010000010 */
			huffman.Pair{1966, 11},     /*   2: (0,-4) 11110101110 */
			huffman.Pair{72, 8},        /*   3: (0,-3) 01001000 */
			huffman.Pair{14, 4},        /*   4: (0,-2) 1110 */
			huffman.Pair{1, 3},         /*   5: (0,-1) 001 */
			huffman.Pair{2, 2},         /*   6: (0, 0) 10 */
			huffman.Pair{0, 3},         /*   7: (0, 1) 000 */
			huffman.Pair{7, 4},         /*   8: (0, 2) 0111 */
			huffman.Pair{123, 7},       /*   9: (0, 3) 1111011 */
			huffman.Pair{1965, 11},     /*  10: (0, 4) 11110101101 */
			huffman.Pair{125569, 17},   /*  11: (0, 5) 11110101010000001 */
			huffman.Pair{16073139, 24}, /*  12: (0, 6) 111101010100000110110011 */

			huffman.Pair{32146283, 25}, /*  13: (1,-6) 1111010101000001101101011 */
			huffman.Pair{502272, 19},   /*  14: (1,-5) 1111010101000000000 */
			huffman.Pair{3934, 12},     /*  15: (1,-4) 111101011110 */
			huffman.Pair{147, 9},       /*  16: (1,-3) 010010011 */
			huffman.Pair{16, 6},        /*  17: (1,-2) 010000 */
			huffman.Pair{6, 4},         /*  18: (1,-1) 0110 */
			huffman.Pair{6, 3},         /*  19: (1, 0) 110 */
			huffman.Pair{5, 4},         /*  20: (1, 1) 0101 */
			huffman.Pair{31, 5},        /*  21: (1, 2) 11111 */
			huffman.Pair{146, 9},       /*  22: (1, 3) 010010010 */
			huffman.Pair{3925, 12},     /*  23: (1, 4) 111101010101 */
			huffman.Pair{251143, 18},   /*  24: (1, 5) 111101010100000111 */
			huffman.Pair{32146282, 25}, /*  25: (1, 6) 1111010101000001101101010 */

			huffman.Pair{257170216, 28}, /*  26: (2,-6) 1111010101000001101100101000 */
			huffman.Pair{2009097, 21},   /*  27: (2,-5) 111101010100000001001 */
			huffman.Pair{31394, 15},     /*  28: (2,-4) 111101010100010 */
			huffman.Pair{1961, 11},      /*  29: (2,-3) 11110101001 */
			huffman.Pair{75, 8},         /*  30: (2,-2) 01001011 */
			huffman.Pair{60, 6},         /*  31: (2,-1) 111100 */
			huffman.Pair{17, 6},         /*  32: (2, 0) 010001 */
			huffman.Pair{19, 6},         /*  33: (2, 1) 010011 */
			huffman.Pair{74, 8},         /*  34: (2, 2) 01001010 */
			huffman.Pair{1960, 11},      /*  35: (2, 3) 11110101000 */
			huffman.Pair{31393, 15},     /*  36: (2, 4) 111101010100001 */
			huffman.Pair{2009096, 21},   /*  37: (2, 5) 111101010100000001000 */
			huffman.Pair{128585111, 27}, /*  38: (2, 6) 111101010100000110110010111 */

			huffman.Pair{2057361764, 31}, /*  39: (3,-6) 1111010101000001101100101100100 */
			huffman.Pair{16073143, 24},   /*  40: (3,-5) 111101010100000110110111 */
			huffman.Pair{502284, 19},     /*  41: (3,-4) 1111010101000001100 */
			huffman.Pair{15699, 14},      /*  42: (3,-3) 11110101010011 */
			huffman.Pair{1964, 11},       /*  43: (3,-2) 11110101100 */
			huffman.Pair{977, 10},        /*  44: (3,-1) 1111010001 */
			huffman.Pair{489, 9},         /*  45: (3, 0) 111101001 */
			huffman.Pair{976, 10},        /*  46: (3, 1) 1111010000 */
			huffman.Pair{1963, 11},       /*  47: (3, 2) 11110101011 */
			huffman.Pair{15698, 14},      /*  48: (3, 3) 11110101010010 */
			huffman.Pair{502275, 19},     /*  49: (3, 4) 1111010101000000011 */
			huffman.Pair{16073142, 24},   /*  50: (3, 5) 111101010100000110110110 */
			huffman.Pair{1028680883, 30}, /*  51: (3, 6) 111101010100000110110010110011 */

			huffman.Pair{1411067048, 36}, /*  52: (4,-6) 1000 */
			huffman.Pair{514340439, 29},  /*  53: (4,-5) 11110101010000011011001010111 */
			huffman.Pair{16073137, 24},   /*  54: (4,-4) 111101010100000110110001 */
			huffman.Pair{1004547, 20},    /*  55: (4,-3) 11110101010000000011 */
			huffman.Pair{62791, 16},      /*  56: (4,-2) 1111010101000111 */
			huffman.Pair{15741, 14},      /*  57: (4,-1) 11110101111101 */
			huffman.Pair{7871, 13},       /*  58: (4, 0) 1111010111111 */
			huffman.Pair{15740, 14},      /*  59: (4, 1) 11110101111100 */
			huffman.Pair{62790, 16},      /*  60: (4, 2) 1111010101000110 */
			huffman.Pair{1004546, 20},    /*  61: (4, 3) 11110101010000000010 */
			huffman.Pair{16073136, 24},   /*  62: (4, 4) 111101010100000110110000 */
			huffman.Pair{514340438, 29},  /*  63: (4, 5) 11110101010000011011001010110 */
			huffman.Pair{2853017175, 35}, /*  64: (4, 6) 111 */

			huffman.Pair{1102236309, 40}, /*  65: (5,-6) 10010101 */
			huffman.Pair{2853017174, 35}, /*  66: (5,-5) 110 */
			huffman.Pair{1028680871, 30}, /*  67: (5,-4) 111101010100000110110010100111 */
			huffman.Pair{64292553, 26},   /*  68: (5,-3) 11110101010000011011001001 */
			huffman.Pair{4018287, 22},    /*  69: (5,-2) 1111010101000001101111 */
			huffman.Pair{2009099, 21},    /*  70: (5,-1) 111101010100000001011 */
			huffman.Pair{1004570, 20},    /*  71: (5, 0) 11110101010000011010 */
			huffman.Pair{2009098, 21},    /*  72: (5, 1) 111101010100000001010 */
			huffman.Pair{4018286, 22},    /*  73: (5, 2) 1111010101000001101110 */
			huffman.Pair{64292552, 26},   /*  74: (5, 3) 11110101010000011011001000 */
			huffman.Pair{1028680870, 30}, /*  75: (5, 4) 111101010100000110110010100110 */
			huffman.Pair{2853017173, 35}, /*  76: (5, 5) 101 */
			huffman.Pair{1102236308, 40}, /*  77: (5, 6) 10010100 */

			huffman.Pair{113977947, 42},  /*  78: (6,-6) 1001011011 */
			huffman.Pair{2204472620, 41}, /*  79: (6,-5) 100101100 */
			huffman.Pair{1349300900, 38}, /*  80: (6,-4) 100100 */
			huffman.Pair{3934479764, 33}, /*  81: (6,-3) 0 */
			huffman.Pair{1028680881, 30}, /*  82: (6,-2) 111101010100000110110010110001 */
			huffman.Pair{514340434, 29},  /*  83: (6,-1) 11110101010000011011001010010 */
			huffman.Pair{257170218, 28},  /*  84: (6, 0) 1111010101000001101100101010 */
			huffman.Pair{257170221, 28},  /*  85: (6, 1) 1111010101000001101100101101 */
			huffman.Pair{1028680880, 30}, /*  86: (6, 2) 111101010100000110110010110000 */
			huffman.Pair{4114723531, 32}, /*  87: (6, 3) 11110101010000011011001011001011 */
			huffman.Pair{2822134099, 37}, /*  88: (6, 4) 10011 */
			huffman.Pair{1102236311, 40}, /*  89: (6, 5) 10010111 */
			huffman.Pair{113977946, 42},  /*  90: (6, 6) 1001011010 */
		},
		[]huffman.Triple{
			huffman.Triple{1, 26, -1},    /*   0: */
			huffman.Triple{2, 5, -1},     /*   1: */
			huffman.Triple{3, 4, -1},     /*   2: */
			huffman.Triple{-1, -1, 7},    /*   3: (0, 1)  3 bits */
			huffman.Triple{-1, -1, 5},    /*   4: (0,-1)  3 bits */
			huffman.Triple{6, 23, -1},    /*   5: */
			huffman.Triple{7, 22, -1},    /*   6: */
			huffman.Triple{8, 11, -1},    /*   7: */
			huffman.Triple{9, 10, -1},    /*   8: */
			huffman.Triple{-1, -1, 17},   /*   9: (1,-2)  6 bits */
			huffman.Triple{-1, -1, 32},   /*  10: (2, 0)  6 bits */
			huffman.Triple{12, 21, -1},   /*  11: */
			huffman.Triple{13, 18, -1},   /*  12: */
			huffman.Triple{14, 15, -1},   /*  13: */
			huffman.Triple{-1, -1, 3},    /*  14: (0,-3)  8 bits */
			huffman.Triple{16, 17, -1},   /*  15: */
			huffman.Triple{-1, -1, 22},   /*  16: (1, 3)  9 bits */
			huffman.Triple{-1, -1, 16},   /*  17: (1,-3)  9 bits */
			huffman.Triple{19, 20, -1},   /*  18: */
			huffman.Triple{-1, -1, 34},   /*  19: (2, 2)  8 bits */
			huffman.Triple{-1, -1, 30},   /*  20: (2,-2)  8 bits */
			huffman.Triple{-1, -1, 33},   /*  21: (2, 1)  6 bits */
			huffman.Triple{-1, -1, 20},   /*  22: (1, 1)  4 bits */
			huffman.Triple{24, 25, -1},   /*  23: */
			huffman.Triple{-1, -1, 18},   /*  24: (1,-1)  4 bits */
			huffman.Triple{-1, -1, 8},    /*  25: (0, 2)  4 bits */
			huffman.Triple{27, 28, -1},   /*  26: */
			huffman.Triple{-1, -1, 6},    /*  27: (0, 0)  2 bits */
			huffman.Triple{29, 30, -1},   /*  28: */
			huffman.Triple{-1, -1, 19},   /*  29: (1, 0)  3 bits */
			huffman.Triple{31, 32, -1},   /*  30: */
			huffman.Triple{-1, -1, 4},    /*  31: (0,-2)  4 bits */
			huffman.Triple{33, 180, -1},  /*  32: */
			huffman.Triple{34, 35, -1},   /*  33: */
			huffman.Triple{-1, -1, 31},   /*  34: (2,-1)  6 bits */
			huffman.Triple{36, 179, -1},  /*  35: */
			huffman.Triple{37, 42, -1},   /*  36: */
			huffman.Triple{38, 41, -1},   /*  37: */
			huffman.Triple{39, 40, -1},   /*  38: */
			huffman.Triple{-1, -1, 46},   /*  39: (3, 1) 10 bits */
			huffman.Triple{-1, -1, 44},   /*  40: (3,-1) 10 bits */
			huffman.Triple{-1, -1, 45},   /*  41: (3, 0)  9 bits */
			huffman.Triple{43, 166, -1},  /*  42: */
			huffman.Triple{44, 47, -1},   /*  43: */
			huffman.Triple{45, 46, -1},   /*  44: */
			huffman.Triple{-1, -1, 35},   /*  45: (2, 3) 11 bits */
			huffman.Triple{-1, -1, 29},   /*  46: (2,-3) 11 bits */
			huffman.Triple{48, 165, -1},  /*  47: */
			huffman.Triple{49, 164, -1},  /*  48: */
			huffman.Triple{50, 161, -1},  /*  49: */
			huffman.Triple{51, 156, -1},  /*  50: */
			huffman.Triple{52, 155, -1},  /*  51: */
			huffman.Triple{53, 70, -1},   /*  52: */
			huffman.Triple{54, 69, -1},   /*  53: */
			huffman.Triple{55, 60, -1},   /*  54: */
			huffman.Triple{56, 57, -1},   /*  55: */
			huffman.Triple{-1, -1, 14},   /*  56: (1,-5) 19 bits */
			huffman.Triple{58, 59, -1},   /*  57: */
			huffman.Triple{-1, -1, 61},   /*  58: (4, 3) 20 bits */
			huffman.Triple{-1, -1, 55},   /*  59: (4,-3) 20 bits */
			huffman.Triple{61, 68, -1},   /*  60: */
			huffman.Triple{62, 65, -1},   /*  61: */
			huffman.Triple{63, 64, -1},   /*  62: */
			huffman.Triple{-1, -1, 37},   /*  63: (2, 5) 21 bits */
			huffman.Triple{-1, -1, 27},   /*  64: (2,-5) 21 bits */
			huffman.Triple{66, 67, -1},   /*  65: */
			huffman.Triple{-1, -1, 72},   /*  66: (5, 1) 21 bits */
			huffman.Triple{-1, -1, 70},   /*  67: (5,-1) 21 bits */
			huffman.Triple{-1, -1, 49},   /*  68: (3, 4) 19 bits */
			huffman.Triple{-1, -1, 11},   /*  69: (0, 5) 17 bits */
			huffman.Triple{71, 72, -1},   /*  70: */
			huffman.Triple{-1, -1, 1},    /*  71: (0,-5) 17 bits */
			huffman.Triple{73, 154, -1},  /*  72: */
			huffman.Triple{74, 75, -1},   /*  73: */
			huffman.Triple{-1, -1, 41},   /*  74: (3,-4) 19 bits */
			huffman.Triple{76, 77, -1},   /*  75: */
			huffman.Triple{-1, -1, 71},   /*  76: (5, 0) 20 bits */
			huffman.Triple{78, 151, -1},  /*  77: */
			huffman.Triple{79, 142, -1},  /*  78: */
			huffman.Triple{80, 83, -1},   /*  79: */
			huffman.Triple{81, 82, -1},   /*  80: */
			huffman.Triple{-1, -1, 62},   /*  81: (4, 4) 24 bits */
			huffman.Triple{-1, -1, 54},   /*  82: (4,-4) 24 bits */
			huffman.Triple{84, 141, -1},  /*  83: */
			huffman.Triple{85, 88, -1},   /*  84: */
			huffman.Triple{86, 87, -1},   /*  85: */
			huffman.Triple{-1, -1, 74},   /*  86: (5, 3) 26 bits */
			huffman.Triple{-1, -1, 68},   /*  87: (5,-3) 26 bits */
			huffman.Triple{89, 102, -1},  /*  88: */
			huffman.Triple{90, 97, -1},   /*  89: */
			huffman.Triple{91, 92, -1},   /*  90: */
			huffman.Triple{-1, -1, 26},   /*  91: (2,-6) 28 bits */
			huffman.Triple{93, 94, -1},   /*  92: */
			huffman.Triple{-1, -1, 83},   /*  93: (6,-1) 29 bits */
			huffman.Triple{95, 96, -1},   /*  94: */
			huffman.Triple{-1, -1, 75},   /*  95: (5, 4) 30 bits */
			huffman.Triple{-1, -1, 67},   /*  96: (5,-4) 30 bits */
			huffman.Triple{98, 99, -1},   /*  97: */
			huffman.Triple{-1, -1, 84},   /*  98: (6, 0) 28 bits */
			huffman.Triple{100, 101, -1}, /*  99: */
			huffman.Triple{-1, -1, 63},   /* 100: (4, 5) 29 bits */
			huffman.Triple{-1, -1, 53},   /* 101: (4,-5) 29 bits */
			huffman.Triple{103, 140, -1}, /* 102: */
			huffman.Triple{104, 139, -1}, /* 103: */
			huffman.Triple{105, 108, -1}, /* 104: */
			huffman.Triple{106, 107, -1}, /* 105: */
			huffman.Triple{-1, -1, 86},   /* 106: (6, 2) 30 bits */
			huffman.Triple{-1, -1, 82},   /* 107: (6,-2) 30 bits */
			huffman.Triple{109, 138, -1}, /* 108: */
			huffman.Triple{110, 111, -1}, /* 109: */
			huffman.Triple{-1, -1, 39},   /* 110: (3,-6) 31 bits */
			huffman.Triple{112, 137, -1}, /* 111: */
			huffman.Triple{113, 114, -1}, /* 112: */
			huffman.Triple{-1, -1, 81},   /* 113: (6,-3) 33 bits */
			huffman.Triple{115, 134, -1}, /* 114: */
			huffman.Triple{116, 133, -1}, /* 115: */
			huffman.Triple{117, 118, -1}, /* 116: */
			huffman.Triple{-1, -1, 52},   /* 117: (4,-6) 36 bits */
			huffman.Triple{119, 132, -1}, /* 118: */
			huffman.Triple{120, 121, -1}, /* 119: */
			huffman.Triple{-1, -1, 80},   /* 120: (6,-4) 38 bits */
			huffman.Triple{122, 125, -1}, /* 121: */
			huffman.Triple{123, 124, -1}, /* 122: */
			huffman.Triple{-1, -1, 77},   /* 123: (5, 6) 40 bits */
			huffman.Triple{-1, -1, 65},   /* 124: (5,-6) 40 bits */
			huffman.Triple{126, 131, -1}, /* 125: */
			huffman.Triple{127, 128, -1}, /* 126: */
			huffman.Triple{-1, -1, 79},   /* 127: (6,-5) 41 bits */
			huffman.Triple{129, 130, -1}, /* 128: */
			huffman.Triple{-1, -1, 90},   /* 129: (6, 6) 42 bits */
			huffman.Triple{-1, -1, 78},   /* 130: (6,-6) 42 bits */
			huffman.Triple{-1, -1, 89},   /* 131: (6, 5) 40 bits */
			huffman.Triple{-1, -1, 88},   /* 132: (6, 4) 37 bits */
			huffman.Triple{-1, -1, 76},   /* 133: (5, 5) 35 bits */
			huffman.Triple{135, 136, -1}, /* 134: */
			huffman.Triple{-1, -1, 66},   /* 135: (5,-5) 35 bits */
			huffman.Triple{-1, -1, 64},   /* 136: (4, 6) 35 bits */
			huffman.Triple{-1, -1, 87},   /* 137: (6, 3) 32 bits */
			huffman.Triple{-1, -1, 51},   /* 138: (3, 6) 30 bits */
			huffman.Triple{-1, -1, 85},   /* 139: (6, 1) 28 bits */
			huffman.Triple{-1, -1, 38},   /* 140: (2, 6) 27 bits */
			huffman.Triple{-1, -1, 12},   /* 141: (0, 6) 24 bits */
			huffman.Triple{143, 148, -1}, /* 142: */
			huffman.Triple{144, 145, -1}, /* 143: */
			huffman.Triple{-1, -1, 0},    /* 144: (0,-6) 24 bits */
			huffman.Triple{146, 147, -1}, /* 145: */
			huffman.Triple{-1, -1, 25},   /* 146: (1, 6) 25 bits */
			huffman.Triple{-1, -1, 13},   /* 147: (1,-6) 25 bits */
			huffman.Triple{149, 150, -1}, /* 148: */
			huffman.Triple{-1, -1, 50},   /* 149: (3, 5) 24 bits */
			huffman.Triple{-1, -1, 40},   /* 150: (3,-5) 24 bits */
			huffman.Triple{152, 153, -1}, /* 151: */
			huffman.Triple{-1, -1, 73},   /* 152: (5, 2) 22 bits */
			huffman.Triple{-1, -1, 69},   /* 153: (5,-2) 22 bits */
			huffman.Triple{-1, -1, 24},   /* 154: (1, 5) 18 bits */
			huffman.Triple{-1, -1, 36},   /* 155: (2, 4) 15 bits */
			huffman.Triple{157, 158, -1}, /* 156: */
			huffman.Triple{-1, -1, 28},   /* 157: (2,-4) 15 bits */
			huffman.Triple{159, 160, -1}, /* 158: */
			huffman.Triple{-1, -1, 60},   /* 159: (4, 2) 16 bits */
			huffman.Triple{-1, -1, 56},   /* 160: (4,-2) 16 bits */
			huffman.Triple{162, 163, -1}, /* 161: */
			huffman.Triple{-1, -1, 48},   /* 162: (3, 3) 14 bits */
			huffman.Triple{-1, -1, 42},   /* 163: (3,-3) 14 bits */
			huffman.Triple{-1, -1, 23},   /* 164: (1, 4) 12 bits */
			huffman.Triple{-1, -1, 47},   /* 165: (3, 2) 11 bits */
			huffman.Triple{167, 170, -1}, /* 166: */
			huffman.Triple{168, 169, -1}, /* 167: */
			huffman.Triple{-1, -1, 43},   /* 168: (3,-2) 11 bits */
			huffman.Triple{-1, -1, 10},   /* 169: (0, 4) 11 bits */
			huffman.Triple{171, 172, -1}, /* 170: */
			huffman.Triple{-1, -1, 2},    /* 171: (0,-4) 11 bits */
			huffman.Triple{173, 174, -1}, /* 172: */
			huffman.Triple{-1, -1, 15},   /* 173: (1,-4) 12 bits */
			huffman.Triple{175, 178, -1}, /* 174: */
			huffman.Triple{176, 177, -1}, /* 175: */
			huffman.Triple{-1, -1, 59},   /* 176: (4, 1) 14 bits */
			huffman.Triple{-1, -1, 57},   /* 177: (4,-1) 14 bits */
			huffman.Triple{-1, -1, 58},   /* 178: (4, 0) 13 bits */
			huffman.Triple{-1, -1, 9},    /* 179: (0, 3)  7 bits */
			huffman.Triple{-1, -1, 21},   /* 180: (1, 2)  5 bits */
		},
	}

	BlissBParams := map[int]BlissBParam{

		/* bliss-b 0 */
		0: BlissBParam{
			BLISS_B_0,     /* version */
			7681,          /* q */
			256,           /* n */
			5,             /* d */
			480,           /* mod_p */
			15362,         /* 2 * field modulus  */
			559167,        /* floor(2^32/q)      */
			279583,        /* floor(2^32/q2)     */
			3841,          /* 1/(q + 2) mod 2q   */
			12,            /* kappa */
			530,           /* b_inf */
			2492 * 2492,   /* L2 norm */
			141,           /* nz1 */
			39,            /* nz2 */
			100,           /* sigma */
			17928,         /* M  (actually p_max. see workings below) */
			2.44,          /* m  = repetition rate alpha 0.748   M = 17840  */
			PsiQ7681N256,  /* w */
			RPsiQ7681N256, /* r */
			19,            /* ell (computed by tools/ell) */
			64,            /* precision */
			13,            /* Q bits */
			9,             /* P bits */
			8,             /* N bits */
			432,           /* max sig size (bytes) */
			397,           /* min sig size (bytes) */
			huffman0,      /* Huffman Code */
			3,             /* nz1 */
			17,            /* nz2 */
		},

		/* bliss-b 1 */
		1: BlissBParam{
			BLISS_B_1,      /* version */
			12289,          /* q */
			512,            /* n */
			10,             /* d */
			24,             /* mod_p */
			24578,          /* q2 = 2 * field modulus  */
			349496,         /* q_inv = floor(2^32/q) */
			174748,         /* q2_inv = floor(2^32/q2) */
			6145,           /* one_q2 = 1/(q + 2) mod 2q */
			23,             /* kappa */
			2100,           /* b_inf */
			12872 * 12872,  /* b_l2 = square of L2 norm */
			154,            /* nz1 = number of coeffs equal to +/-1 in the private key */
			0,              /* nz2 = number of coeffs equal to +/-2 */
			215,            /* sigma */
			17825,          /* M  (actually p_max. see workings below)  */
			1.21,           /* m = repetition rate BLISS  strongswan .M = 46539, with alpha = 1.000. BLISS-B .M = 17954, with alpha = 1.610 (we get 17623) */
			PsiQ12289N512,  /* w = powers of omega  (for NTT) */
			RPsiQ12289N512, /* r = powers of omeag/n (for inverse NTT) */
			21,             /* ell */
			64,             /* precision */
			14,             /* Q bits */
			5,              /* P bits */
			9,              /* N bits */
			732,            /* max sig size (bytes) */
			667,            /* min sig size (bytes) */
			huffman1,       /* Huffman Code */
			9,              /* nz1 */
			3,              /* nz2 */
		},

		/* bliss-b 2 */

		2: BlissBParam{
			BLISS_B_2,      /* version */
			12289,          /* q */
			512,            /* n */
			10,             /* d */
			24,             /* mod_p */
			24578,          /* 2 * field modulus  */
			349496,         /* floor(2^32/q)      */
			174748,         /* floor(2^32/q2)     */
			6145,           /* 1/(q + 2) mod 2q   */
			23,             /* kappa */
			1563,           /* b_inf */
			11074 * 11074,  /* L2 norm */
			154,            /* nz1 */
			0,              /* nz2 */
			107,            /* sigma */
			17825,          /* M (actually p_max. see workings below) */
			2.18,           /* m  = repetition rate  alpha = 0.801 */
			PsiQ12289N512,  /* w */
			RPsiQ12289N512, /* r */
			19,             /* ell: computed by tools/ell.c */
			64,             /* precision */
			14,             /* Q bits */
			5,              /* P bits */
			9,              /* N bits */
			700,            /* max sig size (bytes) */
			667,            /* min sig size (bytes) */
			huffman2,       /* Huffman Code */
			7,              /* nz1 */
			2,              /* nz2 */
		},

		/* bliss-b 3 */

		3: BlissBParam{
			BLISS_B_3,      /* version */
			12289,          /* q */
			512,            /* n */
			9,              /* d */
			48,             /* mod_p */
			24578,          /* 2 * field modulus  */
			349496,         /* floor(2^32/q)      */
			174748,         /* floor(2^32/q2)     */
			6145,           /* 1/(q + 2) mod 2q   */
			30,             /* kappa */
			1760,           /* b_inf */
			10206 * 10206,  /* L2 norm */
			216,            /* nz1 */
			16,             /* nz2 */
			250,            /* sigma */
			42270,          /* M  (actually p_max. see workings below) */
			1.40,           /* m  = repetition rate strongswan BLISS .M = 128113,  with alpha = 0.700. BLISS_B .M = 42455, with alpha = 1.216 (we get 42059) */
			PsiQ12289N512,  /* w */
			RPsiQ12289N512, /* r */
			21,             /* ell */
			64,             /* precision */
			14,             /* Q bits */
			6,              /* P bits */
			9,              /* N bits */
			780,            /* max sig size (bytes) */
			675,            /* min sig size (bytes) */
			huffman3,       /* Huffman Code */
			7,              /* nz1 */
			4,              /* nz2 */
		},

		/* bliss-b 4 */

		4: BlissBParam{
			BLISS_B_4,      /* version */
			12289,          /* q */
			512,            /* n */
			8,              /* d */
			96,             /* mod_p */
			24578,          /* 2 * field modulus  */
			349496,         /* floor(2^32/q)      */
			174748,         /* floor(2^32/q2)     */
			6145,           /* 1/(q + 2) mod 2q   */
			39,             /* kappa */
			1613,           /* b_inf */
			9901 * 9901,    /* L2 norm */
			231,            /* nz1 */
			31,             /* nz2 */
			271,            /* sigma */
			69576,          /* M (actually p_max. see workings below) */
			1.61,           /* m  = repetition rate strongswan .M = 244186,  with alpha = 0.550  BLISS-B .M = 70034,  with alpha = 1.027  (we get 69950) */
			PsiQ12289N512,  /* w */
			RPsiQ12289N512, /* r */
			22,             /* ell */
			64,             /* precision */
			14,             /* Q bits */
			7,              /* P bits */
			9,              /* N bits */
			860,            /* max sig size (bytes) */
			749,            /* min sig size (bytes) */
			huffman4,       /* Huffman Code */
			7,              /* nz1 */
			7,              /* nz2 */
		},
	}

	param, ok := BlissBParams[version]
	if ok {
		return &param
	} else {
		return nil
	}
}
